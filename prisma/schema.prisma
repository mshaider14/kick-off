generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Setting {
  id        Int      @id @default(autoincrement())
  shop      String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bar {
  id              String   @id @default(cuid())
  shop            String
  type            String   @default("announcement")
  message         String
  ctaText         String?
  ctaLink         String?
  backgroundColor String   @default("#288d40")
  textColor       String   @default("#ffffff")
  fontSize        Int      @default(14)
  position        String   @default("top")
  isActive        Boolean  @default(false)
  priority        Int      @default(5) // Priority level: 1-10 (1 = highest priority, 10 = lowest)
  startDate       DateTime?
  endDate         DateTime?
  timezone        String?  @default("UTC") // IANA timezone (e.g., "America/New_York", "Europe/London")
  scheduleStartImmediate Boolean @default(false) // If true, bar starts immediately when published
  scheduleEndNever       Boolean @default(false) // If true, bar runs indefinitely

  // Countdown timer fields
  timerType       String?  // "fixed", "daily", "evergreen"
  timerEndDate    DateTime? // For fixed timer
  timerDailyTime  String?  // For daily recurring (HH:MM format)
  timerDuration   Int?     // For evergreen timer (minutes)
  timerFormat     String?  // JSON: {"showDays": true, "showHours": true, "showMinutes": true, "showSeconds": true}
  timerEndAction  String?  // "hide" or "show_message"
  timerEndMessage String?  // Custom message when timer ends
  
  // Free shipping bar fields
  shippingThreshold     Float?   // Free shipping threshold amount
  shippingCurrency      String?  // Currency code (USD, EUR, etc.)
  shippingGoalText      String?  // Message shown before threshold: "Add {amount} more for free shipping!"
  shippingReachedText   String?  // Message shown after threshold: "You've unlocked free shipping!"
  shippingProgressColor String?  // Color for progress bar fill
  shippingShowIcon      Boolean  @default(true) // Show shipping truck icon
  
  // Email capture bar fields
  emailPlaceholder      String?  // Placeholder text for email field
  namePlaceholder       String?  // Placeholder text for name field
  nameFieldEnabled      Boolean  @default(false) // Show optional name field
  submitButtonText      String?  // Submit button text (e.g., "Get My Discount")
  successMessage        String?  // Message shown after successful submission
  discountCode          String?  // Discount code to reveal after submission
  privacyCheckboxEnabled Boolean @default(false) // Require privacy compliance checkbox
  privacyCheckboxText   String?  // Privacy checkbox label text
  
  // Advanced design customization fields
  fontFamily      String?  @default("system-ui, -apple-system, sans-serif")
  fontWeight      String?  @default("normal") // "normal", "medium", "bold"
  textAlign       String?  @default("center") // "left", "center", "right"
  paddingTop      Int?     @default(12) // in pixels
  paddingBottom   Int?     @default(12) // in pixels
  paddingLeft     Int?     @default(20) // in pixels
  paddingRight    Int?     @default(20) // in pixels
  borderColor     String?  // Optional border color
  borderWidth     Int?     @default(0) // Border width in pixels
  borderRadius    Int?     @default(0) // Border radius in pixels
  buttonBgColor   String?  // CTA button background color
  buttonTextColor String?  // CTA button text color
  buttonBorder    String?  // CTA button border style
  shadowStyle     String?  // Shadow effect: "none", "subtle", "medium", "strong"
  
  // Targeting rules fields
  targetDevices      String?  @default("both") // "desktop", "mobile", "both"
  targetPages        String?  @default("all") // "all", "homepage", "product", "collection", "cart", "specific", "pattern"
  targetSpecificUrls String?  // JSON array of specific URLs (when targetPages is "specific")
  targetUrlPattern   String?  // JSON: {"type": "contains|starts_with|ends_with", "value": "..."} (when targetPages is "pattern")
  displayFrequency   String?  @default("always") // "always", "once_per_session", "once_per_visitor"
  
  // Geo-targeting fields
  geoTargetingEnabled Boolean  @default(false) // Enable/disable geo-targeting
  geoTargetingMode    String?  @default("all") // "all", "include", "exclude"
  geoTargetedCountries String? // JSON array of ISO country codes (e.g., ["US", "CA", "GB"])
  
  // Multi-message rotation fields
  messages           String?  // JSON array of message objects: [{"message": "...", "ctaText": "...", "ctaLink": "..."}]
  rotationSpeed      Int?     @default(5) // Rotation speed in seconds (3-30)
  transitionType     String?  @default("fade") // Transition animation: "fade", "slide"
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  views           BarView[]
  clicks          BarClick[]
  emails          EmailSubmission[]
  
  @@index([shop])
  @@index([shop, isActive])
  @@index([shop, isActive, priority])
}

model BarView {
  id        String   @id @default(cuid())
  barId     String
  bar       Bar      @relation(fields: [barId], references: [id], onDelete: Cascade)
  shop      String
  timestamp DateTime @default(now())
  userAgent String?
  
  @@index([barId])
  @@index([shop])
  @@index([timestamp])
  @@index([shop, timestamp])
}

model BarClick {
  id        String   @id @default(cuid())
  barId     String
  bar       Bar      @relation(fields: [barId], references: [id], onDelete: Cascade)
  shop      String
  ctaLink   String?
  timestamp DateTime @default(now())
  userAgent String?
  
  @@index([barId])
  @@index([shop])
  @@index([timestamp])
  @@index([shop, timestamp])
}

model EmailSubmission {
  id        String   @id @default(cuid())
  barId     String
  bar       Bar      @relation(fields: [barId], references: [id], onDelete: Cascade)
  shop      String
  email     String
  name      String?
  timestamp DateTime @default(now())
  userAgent String?
  
  @@index([barId])
  @@index([shop])
  @@index([email])
  @@index([shop, email])
  @@index([timestamp])
  @@index([shop, timestamp])
}